def solution():
    """Лягушка живет на координатной прямой Ox и должна добраться домой в точку n из точки 1. Она может прыгать вправо
    на расстояние не более чем d. Таким образом, после прыжка из x она перемещается в точку x+a, где a — целое число от
    1 до d.

    Для каждой точки от 1 до n известно, есть ли в ней лилия. Лягушка может прыгать только по лилиям. Гарантируется, что
     в точках 1 и n лилии обязательно есть.

    Определите минимальное количество прыжков, которые нужны сделать лягушке, чтобы попасть из точки 1 домой в точку n.
    Считайте, что изначально лягушка находится в точке 1. Если лягушка не может добраться домой, то выведите -1.

    Входные данные
    В первой строке записаны два целых числа n и d (2≤n≤100, 1≤d≤n-1) — точка, в которую лягушка хочет попасть, и
    максимальная длина прыжка лягушки.

    Во второй строке записана строка s длины n, состоящая из нулей и единиц. Если очередной символ строки s равен нулю,
    то в соответствующей точке нет лилии, в противном случае, в соответствующей точке лилия есть. Гарантируется, что
    первый и последний символы строки s равны единице.

    Выходные данные
    Если лягушка не сможет попасть домой, выведите -1.

    В противном случае, выведите минимальное количество прыжков, которые нужно сделать лягушке, чтобы попасть из точки
    1 в точку n."""
    n, d = [int(_) for _ in input().split()]
    tmp = int(input())
    jump, index = 0, 0
    s = []
    for _ in range(n):
        s.append(tmp % 10)
        tmp //= 10
    s.reverse()
    i = 0
    while i + 1 < n:
        for j in range(d, 0, -1):
            if i + j < n and s[i + j] == 1:
                i += j
                break
            index = j
        if index == 1:
            return -1
        jump += 1
    return jump
    pass


print(solution())
